
DV1497: Inlämningsuppgift B

Generella krav:

Inga variabler får vara globala.
Konstanter bör vara globala.
Alla funktioner som kan vara konstanta (const) ska vara det.
Alla klasser delas upp i h-fil och cpp-fil.
Lösningen får inte generera några minnesläckor.
Alla medlemsvariabler ska vara privata.
Virke

En byggvarufirma lagerför stora mängder virke och de behöver ett system för
att hantera detta virke. En del av virket kan delas in i paneler och reglar.
Panelerna har i detta system egenskaperna dimension, pris per meter, profil
samt information om huruvida panelen är grundmålad eller ej. Reglarna har
dimension, pris per meter samt klassificering (ett mått på bärigheten /
kvaliteten).

Exempel:
Panel:
Dimension: 21x120
Pris per meter: 15
Profil: Baspanel
Grundmålad: Ja
Regel:
Dimension: 45x145
Pris per meter: 25
Klassificering: C24



Implementera en arvshierarki för virke enligt ovan där minst följande ska vara
uppfyllt:

Arvsmekanismen ska användas logiskt och rimligt i avsikt att generalisera
respektive specialisera.

Basklassen ska vara abstrakt.

Polymorfism som möjliggör dynamisk bindning ska användas alla medlemsvariabler ska vara av en logiskt lämplig typ.

För allt virke (WainScoting respektive RuleTimber) ska det finnas
möjlighet att ändra samt erhålla värden på alla egenskaper.

Allt virke ska ha en medlemsfunktion benämnd toString() vilken
returnerar en sträng innehållande all information om objektet.

Gör därefter en klass för att hantera detta virke.

Denna klass ska ha en dynamiskt allokerad array innehållande pekare av
basklasstyp. Vidare ska det finnas medlemsfunktioner för att ombesörja
följande:

Lägga till en panel.

Lägga till en regel.

Fylla en array av typen string med innehåll från allt inlagt virke.

Fylla en array av typen string med innehåll från samtliga paneler.

Fylla en array av typen string med innehåll från samtliga reglar.

Erhålla antalet inlagda reglar (för att kunna dimensionera arrayerna
ovan).

Erhålla antalet inlagda paneler (för att kunna dimensionera arrayerna
ovan).

Ta bort ett virke givet dimension och pris.

Ändra egenskapen grundmålad för en panel givet dimension och profil.
Arrayen ska vid behov expandera.


Du ska i virkeshanteraren dessutom implementera konstruktor(er),
destruktor, copy-konstruktor och tilldelningsoperator.

Observera att ingen inmatning eller utmatning ska förekomma i
medlemsfunktionerna.

Du ska även bifoga en testfil i vilken copy-konstruktor, destruktor samt
tilldelningsoperator för virkeshanteraren testas på ett tillförlitligt sätt för att
säkerställa att inga minnesläckor genereras!

Denna fil ska vara välkommenterad avseende vad som testas när i koden.

Avslutningsvis gör du ett textbaserat menystyrt gränssnitt där användaren via
menyval kan arbeta med en hanterare för virke enligt ovan.

Hantera separata delproblem i separata funktioner.